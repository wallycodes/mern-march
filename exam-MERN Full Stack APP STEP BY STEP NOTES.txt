-Setup forms etc

- set up a const for getters and setters with useState (import useState)
- setup the prperties of the object
- setup changehandler so we can store the info into useState
- add these handlers to form onChange={changeHandler}
- add the value of the input forms value={show.title}

- pass props in as a parameter to the 'Form' variable so we can use the form info in our App.js,
remember that info gets passed from parent to child (componmenet to App.js)

SETUP BACKEND FIRST
Backend
-create/copy folder structure
-change the config file, change the name of the DB, new name will create new one automatically
-install mongoose and express
-change names of all files to match (make sure routes to files are changed
-change const in server.js file to new const
-change all names

-install axios on client folder so we can make api calls to our own server/api (npm i axios)

-install cors on server folder (npm i cors) (must install to communicate with client across different ports) make sure to import it on the server.js
const cors = require('cors');
app.use(cors());

-run server with 'nodemon server.js' run client 'npm start'
-import axios into App.js and useEffect

-create displayt page and move the useEffect from the App.js that has the whole list into display page, then get DB info to display
-install 'npm i react-router-dom' on client folder




Wally, for sure!! There are so many dependencies to keep track of: 
server: mongoose, cors, express, nodemon
client: axios, react-router-dom



here are your status codes again if y'all need them. I also pinned them to the Discord chat thanks to Mayur posting them there

// 1xx (Informational): The request was received and the server is continuing to process it.
// 2xx (Successful): The request was successfully received, understood, and accepted.
// 3xx (Redirection): The server is redirecting the client to a different resource.
// 4xx (Client Error): The request contains bad syntax or cannot be fulfilled by the server.
// 5xx (Server Error): The server failed to fulfill a valid request.

// MOST COMMON
// 200 OK: The request was successful, and the server has returned the requested data.
// 201 Created: The server has successfully created a new resource as a result of the request.
// 204 No Content: The server has successfully processed the request but there is no content to return.
// 301 Moved Permanently: The requested resource has been moved to a new location permanently.
// 304 Not Modified: The requested resource has not been modified since the last request.
// 400 Bad Request: The request was malformed or invalid in some way.
// 401 Unauthorized: The request requires authentication or the authentication failed.
// 403 Forbidden: The server understood the request, but is refusing to fulfill it.
// 404 Not Found: The requested resource could not be found on the server.
// 500 Internal Server Error: The server encountered an error while processing the request.
// 503 Service Unavailable: The server is currently unable to handle the request due to a temporary overload or maintenance of the server.
here are your status codes again if y'all need them. I also pinned them to the Discord chat thanks to Mayur posting them there

useState is like a bucket that holds data. It also allows us to update the data in the bucket.
useEffect is like our very own butler. If we want our "dinner" ready for us the second we walk
 in the door, we can create a useEffect hook to have data ready for us the second we go to that
 component. useEffect is commonly used to call an axios api, and that way the api call is already
 done the second we get there.